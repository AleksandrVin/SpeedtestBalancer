# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Results(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, ipv4: str=None, port: int=None):  # noqa: E501
        """Results - a model defined in Swagger

        :param ipv4: The ipv4 of this Results.  # noqa: E501
        :type ipv4: str
        :param port: The port of this Results.  # noqa: E501
        :type port: int
        """
        self.swagger_types = {
            'ipv4': str,
            'port': int
        }

        self.attribute_map = {
            'ipv4': 'ipv4',
            'port': 'port'
        }

        self._ipv4 = ipv4
        self._port = port

    @classmethod
    def from_dict(cls, dikt) -> 'Results':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Results of this Results.  # noqa: E501
        :rtype: Results
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ipv4(self) -> str:
        """Gets the ipv4 of this Results.


        :return: The ipv4 of this Results.
        :rtype: str
        """
        return self._ipv4

    @ipv4.setter
    def ipv4(self, ipv4: str):
        """Sets the ipv4 of this Results.


        :param ipv4: The ipv4 of this Results.
        :type ipv4: str
        """
        if ipv4 is not None and len(ipv4) > 16:
            raise ValueError("Invalid value for `ipv4`, length must be less than or equal to `16`")  # noqa: E501
        if ipv4 is not None and len(ipv4) < 8:
            raise ValueError("Invalid value for `ipv4`, length must be greater than or equal to `8`")  # noqa: E501

        self._ipv4 = ipv4

    @property
    def port(self) -> int:
        """Gets the port of this Results.


        :return: The port of this Results.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port: int):
        """Sets the port of this Results.


        :param port: The port of this Results.
        :type port: int
        """

        self._port = port
